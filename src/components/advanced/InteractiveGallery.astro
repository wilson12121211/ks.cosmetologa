---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    category?: string;
    title?: string;
    description?: string;
  }>;
  columns?: number;
  showFilter?: boolean;
  lightbox?: boolean;
}

const {
  images,
  columns = 3,
  showFilter = true,
  lightbox = true
} = Astro.props;

// Extract unique categories
const categories = [...new Set(images.map(img => img.category).filter(Boolean))];
---

<div 
  class="w-full"
  x-data={`{
    activeFilter: 'all',
    filteredImages: ${JSON.stringify(images)},
    lightboxOpen: false,
    currentImage: null,
    currentIndex: 0,
    
    filterImages(category) {
      this.activeFilter = category;
      if (category === 'all') {
        this.filteredImages = ${JSON.stringify(images)};
      } else {
        this.filteredImages = ${JSON.stringify(images)}.filter(img => img.category === category);
      }
    },
    
    openLightbox(image, index) {
      this.currentImage = image;
      this.currentIndex = index;
      this.lightboxOpen = true;
      document.body.style.overflow = 'hidden';
    },
    
    closeLightbox() {
      this.lightboxOpen = false;
      document.body.style.overflow = 'auto';
    },
    
    nextImage() {
      this.currentIndex = (this.currentIndex + 1) % this.filteredImages.length;
      this.currentImage = this.filteredImages[this.currentIndex];
    },
    
    prevImage() {
      this.currentIndex = this.currentIndex === 0 ? this.filteredImages.length - 1 : this.currentIndex - 1;
      this.currentImage = this.filteredImages[this.currentIndex];
    }
  }`}
>
  <!-- Filter Buttons -->
  {showFilter && categories.length > 0 && (
    <div class="flex flex-wrap justify-center gap-3 mb-8">
      <button 
        @click="filterImages('all')"
        :class="activeFilter === 'all' ? 'bg-pink-600 text-white' : 'bg-white text-gray-700 hover:bg-pink-50'"
        class="px-6 py-2 rounded-full font-medium transition-all duration-300 shadow-md hover:shadow-lg transform hover:scale-105"
      >
        Todos
      </button>
      {categories.map(category => (
        <button 
          @click={`filterImages('${category}')`}
          :class={`activeFilter === '${category}' ? 'bg-pink-600 text-white' : 'bg-white text-gray-700 hover:bg-pink-50'`}
          class="px-6 py-2 rounded-full font-medium transition-all duration-300 shadow-md hover:shadow-lg transform hover:scale-105"
        >
          {category}
        </button>
      ))}
    </div>
  )}
  
  <!-- Gallery Grid -->
  <div 
    class={`grid gap-4 ${columns === 2 ? 'md:grid-cols-2' : columns === 3 ? 'md:grid-cols-2 lg:grid-cols-3' : 'md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'}`}
    x-ref="gallery"
  >
    <template x-for="(image, index) in filteredImages" :key="image.src">
      <div 
        class="group relative overflow-hidden rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 cursor-pointer"
        @click={lightbox ? "openLightbox(image, index)" : ""}
        x-show="true"
        x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="opacity-0 transform scale-95"
        x-transition:enter-end="opacity-100 transform scale-100"
      >
        <!-- Image -->
        <div class="aspect-square overflow-hidden">
          <img 
            :src="image.src" 
            :alt="image.alt"
            class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
            loading="lazy"
          />
        </div>
        
        <!-- Overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <div class="absolute bottom-0 left-0 right-0 p-4 text-white transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
            <h3 x-text="image.title" class="font-semibold text-lg mb-1"></h3>
            <p x-text="image.description" class="text-sm opacity-90"></p>
            
            {lightbox && (
              <div class="flex items-center gap-2 mt-2 text-xs opacity-75">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                </svg>
                <span>Click para ampliar</span>
              </div>
            )}
          </div>
        </div>
        
        <!-- Category Badge -->
        <div x-show="image.category" class="absolute top-3 left-3">
          <span 
            x-text="image.category"
            class="bg-white/90 backdrop-blur-sm text-pink-600 text-xs font-semibold px-2 py-1 rounded-full"
          ></span>
        </div>
      </div>
    </template>
  </div>
  
  <!-- Lightbox Modal -->
  {lightbox && (
    <div 
      x-show="lightboxOpen"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      class="fixed inset-0 z-50 flex items-center justify-center bg-black/90 backdrop-blur-sm"
      @click="closeLightbox()"
      @keydown.escape.window="closeLightbox()"
    >
      <!-- Close Button -->
      <button 
        @click="closeLightbox()"
        class="absolute top-4 right-4 z-10 w-12 h-12 bg-white/10 hover:bg-white/20 rounded-full flex items-center justify-center text-white transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <!-- Navigation Buttons -->
      <button 
        @click.stop="prevImage()"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white/10 hover:bg-white/20 rounded-full flex items-center justify-center text-white transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        @click.stop="nextImage()"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white/10 hover:bg-white/20 rounded-full flex items-center justify-center text-white transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
      
      <!-- Image Container -->
      <div 
        class="max-w-4xl max-h-[90vh] mx-4"
        @click.stop
      >
        <img 
          x-show="currentImage"
          :src="currentImage?.src" 
          :alt="currentImage?.alt"
          class="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
          x-transition:enter="transition ease-out duration-300"
          x-transition:enter-start="opacity-0 transform scale-95"
          x-transition:enter-end="opacity-100 transform scale-100"
        />
        
        <!-- Image Info -->
        <div x-show="currentImage?.title || currentImage?.description" class="mt-4 text-center text-white">
          <h3 x-text="currentImage?.title" class="text-xl font-semibold mb-2"></h3>
          <p x-text="currentImage?.description" class="text-gray-300"></p>
        </div>
      </div>
      
      <!-- Image Counter -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-sm">
        <span x-text="currentIndex + 1"></span> / <span x-text="filteredImages.length"></span>
      </div>
    </div>
  )}
</div>
